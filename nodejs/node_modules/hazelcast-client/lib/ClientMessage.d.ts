/// <reference types="node" />
/// <reference types="long" />
import * as Long from 'long';
import { Data } from './serialization/Data';
declare class ClientMessage {
    private buffer;
    private cursor;
    private isRetryable;
    constructor(buffer: Buffer);
    static newClientMessage(payloadSize: number): ClientMessage;
    getBuffer(): Buffer;
    getCorrelationId(): Long;
    setCorrelationId(value: Long): void;
    getPartitionId(): number;
    setPartitionId(value: number): void;
    setVersion(value: number): void;
    getMessageType(): number;
    setMessageType(value: number): void;
    getFlags(): number;
    setFlags(value: number): void;
    hasFlags(flags: number): number;
    getFrameLength(): number;
    setFrameLength(value: number): void;
    getDataOffset(): number;
    setDataOffset(value: number): void;
    setRetryable(value: boolean): void;
    appendByte(value: number): void;
    appendBoolean(value: boolean): void;
    appendInt32(value: number): void;
    appendUint8(value: number): void;
    appendLong(value: any): void;
    appendString(value: string): void;
    appendBuffer(buffer: Buffer): void;
    appendData(data: Data): void;
    addFlag(value: number): void;
    updateFrameLength(): void;
    readData(): Data;
    readByte(): number;
    readBoolean(): boolean;
    readUInt8(): number;
    readInt32(): number;
    readLong(): Long;
    readString(): string;
    readBuffer(): Buffer;
    isComplete(): boolean;
    readMapEntry(): any;
    private writeLongInternal(value, offset);
    private readLongInternal(offset);
}
export = ClientMessage;
