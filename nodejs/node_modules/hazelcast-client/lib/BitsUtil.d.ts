/// <reference types="node" />
import Address = require('./Address');
import { Data } from './serialization/Data';
export declare class BitsUtil {
    static EVENT_MEMBER: number;
    static EVENT_MEMBERLIST: number;
    static EVENT_MEMBERATTRIBUTECHANGE: number;
    static EVENT_ENTRY: number;
    static EVENT_ITEM: number;
    static EVENT_TOPIC: number;
    static EVENT_PARTITIONLOST: number;
    static EVENT_DISTRIBUTEDOBJECT: number;
    static EVENT_CACHEINVALIDATION: number;
    static EVENT_MAPPARTITIONLOST: number;
    static EVENT_CACHE: number;
    static EVENT_CACHEBATCHINVALIDATION: number;
    static EVENT_QUERYCACHESINGLE: number;
    static EVENT_QUERYCACHEBATCH: number;
    static EVENT_CACHEPARTITIONLOST: number;
    static EVENT_IMAPINVALIDATION: number;
    static EVENT_IMAPBATCHINVALIDATION: number;
    static EVENT_PARTITIONS: number;
    static BYTE_SIZE_IN_BYTES: number;
    static BOOLEAN_SIZE_IN_BYTES: number;
    static SHORT_SIZE_IN_BYTES: number;
    static CHAR_SIZE_IN_BYTES: number;
    static INT_SIZE_IN_BYTES: number;
    static FLOAT_SIZE_IN_BYTES: number;
    static LONG_SIZE_IN_BYTES: number;
    static DOUBLE_SIZE_IN_BYTES: number;
    static BIG_ENDIAN: number;
    static LITTLE_ENDIAN: number;
    static VERSION: number;
    static BEGIN_FLAG: number;
    static END_FLAG: number;
    static BEGIN_END_FLAG: number;
    static LISTENER_FLAG: number;
    static NULL_ARRAY_LENGTH: number;
    static SIZE_OFFSET: number;
    static FRAME_LENGTH_FIELD_OFFSET: number;
    static VERSION_FIELD_OFFSET: number;
    static FLAGS_FIELD_OFFSET: number;
    static TYPE_FIELD_OFFSET: number;
    static CORRELATION_ID_FIELD_OFFSET: number;
    static PARTITION_ID_FIELD_OFFSET: number;
    static DATA_OFFSET_FIELD_OFFSET: number;
    static HEADER_SIZE: number;
    static calculateSizeData(data: Data): number;
    static getStringSize(value: string, nullable?: boolean): number;
    static calculateSizeString(value: string): number;
    static calculateSizeBuffer(value: Buffer): number;
    static calculateSizeAddress(value: Address): number;
    static writeUInt32(buffer: Buffer, pos: number, val: number, isBigEndian: boolean): void;
    static writeUInt16(buffer: Buffer, pos: number, val: number, isBigEndian: boolean): void;
    static writeUInt8(buffer: Buffer, pos: number, val: number): void;
    static writeInt32(buffer: Buffer, pos: number, val: number, isBigEndian: boolean): void;
    static writeInt16(buffer: Buffer, pos: number, val: number, isBigEndian: boolean): void;
    static writeInt8(buffer: Buffer, pos: number, val: number): void;
    static writeFloat(buffer: Buffer, pos: number, val: number, isBigEndian: boolean): void;
    static writeDouble(buffer: Buffer, pos: number, val: number, isBigEndian: boolean): void;
    static readDouble(buffer: Buffer, pos: number, isBigEndian: boolean): number;
    static readFloat(buffer: Buffer, pos: number, isBigEndian: boolean): number;
    static readInt8(buffer: Buffer, pos: number): number;
    static readInt16(buffer: Buffer, pos: number, isBigEndian: boolean): number;
    static readInt32(buffer: Buffer, pos: number, isBigEndian: boolean): number;
    static readUInt8(buffer: Buffer, pos: number): number;
    static readUInt16(buffer: Buffer, pos: number, isBigEndian: boolean): number;
    static readUInt32(buffer: Buffer, pos: number, isBigEndian: boolean): number;
}
